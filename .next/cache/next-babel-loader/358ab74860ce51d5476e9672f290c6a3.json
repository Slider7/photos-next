{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport unsplash from '../api/unsplash';\nimport Layout from '../components/Layout.js';\nimport Main from '../components/Main.js';\nimport Home from './about';\nconst APIkey = 'add7029af557a934c8737dd2594d2345a4ae37d1bf154e524df5f07d9054daf2';\nexport default class App extends React.Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"getPhotos\", async (pageNum = 1) => {\n      const responce = await unsplash.get('search/photos', {\n        params: {\n          per_page: 15,\n          page: pageNum\n        }\n      });\n      this.setState({\n        images: responce.data.results\n      });\n      /*\r\n      fetch(\r\n        `https://api.unsplash.com/photos/?client_id=${APIkey}&per_page=30&page=${pageNum}`\r\n      )\r\n        .then(res => res.json())\r\n        .then(jsonData => {\r\n          this.setState({\r\n            images: jsonData,\r\n            pageNum,\r\n            isLoading: false\r\n          });\r\n        })\r\n        .catch(error => console.error('Ошибка при запросе данных: ', error));\r\n      */\n    });\n\n    this.searchPhotos = this.searchPhotos.bind(this);\n    this.scrollPhotos = this.scrollPhotos.bind(this);\n    this.resetPhotos = this.resetPhotos.bind(this);\n    this.state = {\n      images: [],\n      query: '',\n      pageNum: 1,\n      isLoading: true\n    };\n  }\n\n  async searchPhotos(query, pageNum = 1) {\n    const fetchResult = await fetch(`https://api.unsplash.com/search/photos/?client_id=${APIkey}&query=${query}&page=${pageNum}&per_page=30`);\n    const images = await fetchResult.json();\n\n    if (images.total === 0) {\n      this.setState({\n        images: [],\n        query: '',\n        pageNum: 1,\n        isLoading: false\n      });\n    } else {\n      sessionStorage.setItem('photos-query', query);\n      sessionStorage.setItem('photos-pageNum', pageNum);\n      this.setState({\n        images: images.results,\n        query,\n        pageNum,\n        isLoading: false\n      });\n    }\n  }\n\n  async scrollPhotos(evt) {\n    let pageNum = this.state.pageNum;\n    if (evt.target.id === 'prev30' && pageNum > 1) pageNum -= 1;\n    if (evt.target.id === 'next30') pageNum += 1;\n\n    if (this.state.query) {\n      await this.searchPhotos(this.state.query, pageNum);\n    } else {\n      await this.getPhotos(pageNum);\n    }\n  }\n\n  async componentDidMount() {\n    /*const query = sessionStorage.getItem('photos-query');\r\n    const pageNum = sessionStorage.getItem('photos-pageNum');\r\n    if (query && pageNum) {\r\n      await this.searchPhotos(query, pageNum);\r\n    } else {\r\n      await this.getPhotos(1);\r\n    }*/\n    await this.getPhotos(1);\n  }\n\n  async resetPhotos() {\n    sessionStorage.setItem('photos-query', '');\n    sessionStorage.setItem('photos-pageNum', 0);\n    this.setState({\n      query: '',\n      pageNum: 1\n    });\n    await this.getPhotos(1);\n  }\n\n  render() {\n    return __jsx(Layout, {\n      searchPhotos: this.searchPhotos,\n      scrollPhotos: this.scrollPhotos,\n      resetPhotos: this.resetPhotos\n    }, this.state.isLoading ? __jsx(\"h2\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '50%'\n      }\n    }, \"Loading...\") : __jsx(Main, {\n      data: this.state.images,\n      apiKey: APIkey\n    }));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}